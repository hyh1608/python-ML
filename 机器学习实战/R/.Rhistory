enddate<-as.Date("2009-10-31")
startdate
#---------------------------------------------------------------------------------#
#抽样
mysample<-leader[sample(1:nrow(leader),3,replace=F),];mysample
#---------------------------------------------------------------------------------#
#抽样
mysample<-leader[sample(1:nrow(leader),3,replace=F),];mysample
#---------------------------------------------------------------------------------#
#抽样
mysample<-leader[sample(1:nrow(leader),3,replace=T),];mysample
sqrt(1:4)#平方根
#---------------------------------------------------------------------------------#
#抽样，replace表示是否放回
mysample<-leader[sample(1:nrow(leader),3,replace=F),];mysample
#常用统计函数
#mean(x,trim=0.05,na.rm=T)#去掉最大5%和最小5%以及所有缺失值的算术平均值
x<-c(1, 2, 3, 4, 5, 6, 7, 8)
css<-sum((x-meanx)**2)
mean(x)
css<-sum((x-meanx)**2)
mean(x)
meanx<-sum(x)/n;meanx
css<-sum((x-meanx)**2)
n<-length(x)
meanx<-sum(x)/n;meanx
css<-sum((x-meanx)**2)
css
var(x)
quantile(x)#分位数
quantile(x,probs=c(0.3,0.83))#求0.3和0.83分位数
quantile(x,probs=seq(0,1,0.25))
seq(1:100,2)
seq(1,100,2)
#正态分布Normal Distribution
#pretty(x,n)创建美观的分割点，通过选取n+1个等间距的取整值，将一个连续型变量x分割为n个区间
x<-pretty(c(-3,3),30)
x
y<-dnorm(x)
y
z
plot(x,y,type="l",xlab="Normal Deviate",ylab="Density")
plot(x,z,type="l",xlab="Normal Deviate",ylab="Dsitribution Function")
# 分布函数
z<-pnorm(x)
plot(x,z,type="l",xlab="Normal Deviate",ylab="Dsitribution Function")
plot(x,y,xlab="Normal Deviate",ylab="Density")
plot(x,y,type='l',xlab="Normal Deviate",ylab="Density")
#标准正态分布的分位点
pnorm(1.645);pnorm(1.96);pnorm(2.33)
# lower.tail=F 为上a分为数
qnorm(0.05,lower.tail=F);qnorm(0.95)
#标准正态分布的分位点
pnorm(1.645);pnorm(1.96);pnorm(2.33)
plot(x,z,type="l",xlab="Normal Deviate",ylab="Dsitribution Function")
install.packages("MASS")
library(MASS)
options(digits=3)
set.seed(1234)
mean <- c(230.7, 146.7, 3.6)  #指定均值向量
sigma <- matrix( c(15360.8, 6721.2, -47.1,
6721.2, 4700.9, -16.5,
-47.1,  -16.5,   0.3), nrow=3, ncol=3)  #指定协方差阵
sigma <- matrix( c(15360.8, 6721.2, -47.1,
6721.2, 4700.9, -16.5,
-47.1,  -16.5,   0.3), nrow=3, ncol=3)  #指定协方差阵
# 生成多元正态分布的随机数，生成500个
mydata <- mvrnorm(500, mean, sigma,empirical=T)
mydata
help(mvnorm)
??mvnorm
#计算字符数量
x<-c("ab","cde","fghij")
nchar(x)
nchar(x[3])
#提取或替换一个字符向量中的子串
x<-"abcdef"
substr(x,2,4)
substr(x,2,4)<-"22";x
sub("\\s",",","Hello.There")
sub("\\s"," ","Hello.There")
sub("\\s",".","Hello,There")
sub("\\s",".","Hello There")
sub("\\s",",","Hello There")
#连接字符串，分隔符为sep
paste("x",1:3,sep="")
paste("x",1:3,sep="M")
#分隔字符串
strsplit("abc","")
mydata <- matrix(rnorm(30), nrow=6)
mydata
apply(mydata, 1, mean)
# 针对列进行运算
apply(mydata, 2, mean)
apply(mydata, 2, mean, trim=0.2)
help(apply)
apply(mydata,2,var)
??trim
sum1<-mydata[2]+mydata[3]
apply(mydata, sum1)
apply(mydata, 2, sum1)
sum1<-mydata[2]+mydata[3]
apply(mydata, 2, sum1)
sum1
mydata
mydata[2]
sum1<-mydata[,2]+mydata[,3]
sum1
apply(mydata, 2, sum1)
??apply
# 表示计算每一列的截尾均值，忽略了最高和最低的20%。
apply(mydata, 2, mean, trim=0.2)
options(digits=2)#限定了输出小数点后数字的位数
Student <- c("John Davis", "Angela Williams",
"Bullwinkle Moose", "David Jones",
"Janice Markhammer", "Cheryl Cushing",
"Reuven Ytzrhak", "Greg Knox", "Joel England",
"Mary Rayburn")
Math<-c(502, 600, 412, 358, 495, 512, 410, 625, 573, 522)
Science<-c(95, 99, 80, 82, 75, 85, 80, 95, 89, 86)
English<-c(25, 22, 18, 15, 20, 28, 15, 30, 27, 18)
roster<-data.frame(Student, Math, Science, English,stringsAsFactors=FALSE)
roster#花名册
# scale将数据标准化
z<-scale(roster[,2:4]);z #将分数标准化
score<-apply(z, 1, mean)
score
# scale将数据标准化
z<-scale(roster[,2:4]);z #将分数标准化
score<-apply(z, 1, mean)
score
#计算各行的均值以获得综合得分，并使用cbind()将其添加到花名册中
roster<-cbind(roster, score);roster
y<-quantile(score, c(.8,.6,.4,.2));y #给出了学生综合得分的百分位数
y[1]
name<-strsplit((roster$Student), " ");name
# 返回的是一个列表
class(name)
#使用函数strsplit()以空格为界把学生姓名拆分为姓氏和名字，应用到字符串组成的向量上返回一个列表
Firstname<-sapply(name, "[", 1)
Firstname
#去掉student变量
roster<-roster[order(Lastname,Firstname),]
#使用函数strsplit()以空格为界把学生姓名拆分为姓氏和名字，应用到字符串组成的向量上返回一个列表
Firstname<-sapply(name, "[", 1)
#提取列表中每个成分的第一个元素
Lastname<-sapply(name, "[", 2)
roster<-cbind(Firstname,Lastname, roster[,-1])
#去掉student变量
roster<-roster[order(Lastname,Firstname),]
#依姓氏和名字对数据集进行排序
roster
roster<-roster[order(score),]
#依姓氏和名字对数据集进行排序
roster
roster<-roster[order(roster$score),]
#依姓氏和名字对数据集进行排序
roster
roster$grade[score>= y[1]]<-"A"
roster$grade[score<y[1] & score>=y[2]]<-"B"
roster$grade[score<y[2] & score>=y[3]]<-"C"
roster$grade[score<y[3] & score>=y[4]]<-"D"
roster$grade[score<y[4]]<-"E"
roster#将学生的百分位数重编码为一个新的类别型成绩变量
roster<-roster[order(roster$score),]
#依姓氏和名字对数据集进行排序
roster
x <- 1:10
"["(x, 2)
f<-1;f[2]<-1;i<-1
while (f[i]+f[i+1]<1000) {
f[i+2]<-f[i]+f[i+1]
i<-i+1
}
f
plot(c(0,1,1,0),c(0,0,1,1),xlab=' ',ylab=' ')
plot(c(0,1,1,0),c(0,0,1,1),xlab=' ',ylab=' ')
text(0,1,labels='A',adj=c(0.3,1.3))
text(0,1,labels='A',adj=c(0.3,1.3))
text(1,1,labels='B',adj=c(1.5,0.5))
text(1,0,labels='C',adj=c(0.3,-0.8))
text(0,0,labels='D',adj=c(-0.5,0.1))
points(0.5,0.5)
text(0.5,0.5,labels = 'o',adj=c(-1.0,0.3))
delta_t <- 0.01;n=110
x<-matrix(0,nrows=5,ncol=n)
x[,1]<-c(0,1,1,0,0)
y<-matrix(0,nrows=5,ncol=n)
y[,1]<-c(1,1,0,0,1)
d<-c(0,0,0,0)
x<-matrix(0,nrow=5,ncol=n)
x[,1]<-c(0,1,1,0,0)
y<-matrix(0,nrow=5,ncol=n)
y[,1]<-c(1,1,0,0,1)
d<-c(0,0,0,0)
for (j in 1:(n-1)){
for (i in 1:4){
d[i]<-sqrt((x[i+1,j]-x[i,j])^2+(y[i+1,j]-y[i,j])^2)
x[i,j+1]<-x[i,j]+delta_t*(x[i+1,j]-x[i,j])/d[i]
y[i,j+1]<-y[i,j]+delta_t*(y[i+1,j]-y[i,j])/d[i]
}
x[5,j+1]<-x[1,j+1]
y[5,j+1]<-y[1,j+1]
}
for (i in 1:4){
lines(x[i,],y[i,])
}
x
#---------------------------------------------------------------------------------#
#整合数据Aggregating data
#aggregate(x,by,FUN) x是待折叠的数据对象，
#by是一个变量名组成的列表（by中的变量必须在列表中，即使只有一个变量），
#这些变量将被去掉以形成新的观测，FUN则是用来计算描述性统计量的标量函数
#根据气缸数和档位数整合mtcars数据，并返回各个数值型变量的均值。
options(digits=3)
attach(mtcars)
mtcars
aggdata <-aggregate(mtcars, by=list(Group.cyl=cyl,Gruoup.gear=gear),
FUN=mean, na.rm=TRUE)
aggdata
#---------------------------------------------------------------------------------#
#reshape包
#首先将数据“融合”melt，以使每一行都是一个唯一的标识符-变量组合，然后将数据“重铸”cast为你想要的任何形状。
install.packages("reshape")
library(reshape)
mtcars[mtcars$cyl==8]
mtcars[mtcars$cyl==8,]
#测量是指最后两列中的值(5,6,3,5,6,1,2,4)，每个测量都能被标识符变量唯一确定，
#本例中的标识符是指ID,Time以及观测属于X1还是X2.
mydata<-data.frame(id=c(1,1,2,2),time=c(1,2,1,2),
X1=c(5,3,6,2),X2=c(6,5,1,4));mydata
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
#测量是指最后两列中的值(5,6,3,5,6,1,2,4)，每个测量都能被标识符变量唯一确定，
#本例中的标识符是指ID,Time以及观测属于X1还是X2.
mydata<-data.frame(id=c(1,1,2,2),time=c(1,2,1,2),
X1=c(5,3,6,2),X2=c(6,5,1,4));mydata
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
cast(md,time~variable,mean)#给出了X1和X2在时刻1和时刻2的均值
cast(md,id~time,mean)#每个观测在时刻1和时刻2的均值，对不同的的X1和X2进行了平均
cast(md,id+time~variable)
cast(md,id+variable~time)
cast(md,id~variable+time)
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
#测量是指最后两列中的值(5,6,3,5,6,1,2,4)，每个测量都能被标识符变量唯一确定，
#本例中的标识符是指ID,Time以及观测属于X1还是X2.
mydata<-data.frame(id=c(1,1,2,2),time=c(1,2,1,2),
X1=c(5,3,6,2),X2=c(6,5,1,4));mydata
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
library(reshape)
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
library(reshape)
#测量是指最后两列中的值(5,6,3,5,6,1,2,4)，每个测量都能被标识符变量唯一确定，
#本例中的标识符是指ID,Time以及观测属于X1还是X2.
mydata<-data.frame(id=c(1,1,2,2),time=c(1,2,1,2),
X1=c(5,3,6,2),X2=c(6,5,1,4));mydata
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
#---------------------------------------------------------------------------------#
#reshape包
#首先将数据“融合”melt，以使每一行都是一个唯一的标识符-变量组合，然后将数据“重铸”cast为你想要的任何形状。
install.packages("reshape2")
library(reshape2)
#测量是指最后两列中的值(5,6,3,5,6,1,2,4)，每个测量都能被标识符变量唯一确定，
#本例中的标识符是指ID,Time以及观测属于X1还是X2.
mydata<-data.frame(id=c(1,1,2,2),time=c(1,2,1,2),
X1=c(5,3,6,2),X2=c(6,5,1,4));mydata
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
cast(md,id+time~variable)
dcast(md,id+time~variable)
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
#---------------------------------------------------------------------------------#
#整合数据Aggregating data
#aggregate(x,by,FUN) x是待折叠的数据对象，
#by是一个变量名组成的列表（by中的变量必须在列表中，即使只有一个变量），
#这些变量将被去掉以形成新的观测，FUN则是用来计算描述性统计量的标量函数
#根据气缸数和档位数整合mtcars数据，并返回各个数值型变量的均值。
options(digits=3)
attach(mtcars)
aggdata <-aggregate(mtcars, by=list(Group.cyl=cyl,Gruoup.gear=gear),
FUN=mean, na.rm=TRUE)
aggdata
#---------------------------------------------------------------------------------#
#reshape包
#首先将数据“融合”melt，以使每一行都是一个唯一的标识符-变量组合，然后将数据“重铸”cast为你想要的任何形状。
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
#测量是指最后两列中的值(5,6,3,5,6,1,2,4)，每个测量都能被标识符变量唯一确定，
#本例中的标识符是指ID,Time以及观测属于X1还是X2.
mydata<-data.frame(id=c(1,1,2,2),time=c(1,2,1,2),
X1=c(5,3,6,2),X2=c(6,5,1,4));mydata
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
dcast(md,id~variable,FUN=mean)#给出了每个观测所有时刻在X1和X2上的均值
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
cast(md,id~time,mean)#每个观测在时刻1和时刻2的均值，对不同的的X1和X2进行了平均
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
dcast(md,time~variable,mean)#给出了X1和X2在时刻1和时刻2的均值
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
dcast(md,time~variable,mean)#给出了X1和X2在时刻1和时刻2的均值
barplot(mtcars,main = '啥呀',xlab = 'hei',ylab = 'ha')
mtcars
aggdata <-aggregate(mtcars, by=list(Group.cyl=cyl,Gruoup.gear=gear),
FUN=mean, na.rm=TRUE)
aggdata
barplot(mtcars,main = '啥呀',xlab = 'hei',ylab = 'ha')
barplot(aggdata,main = '啥呀',xlab = 'hei',ylab = 'ha')
aggdata
barplot(aggdata$mpg,main = '啥呀',xlab = 'hei',ylab = 'ha')
barplot(aggdata$mpg,main = 'e~',xlab = 'hei',ylab = 'ha')
## R作业
## 2.1 (1)
x <- c(1,2,3)
y <- c(4,5,6)
e <- c(1,1,1)
z <- 2*x + y + e
z
y
## 2.1(2)计算x与y的内积
x%*%y
#(8)向量的内积
# 生成序列的优先级更高
x<-1:5;y<-2*1:5
x%*%y
t(x)%*%y
crossprod(x,y)
## R作业
## 2.1 (1)
x <- c(1,2,3)
y <- c(4,5,6)
## 2.1(3)计算x与y的外积
x%o%y
#(5)求矩阵的逆阵及解线性方程组
A<-matrix(c(1:8,10),ncol=3,byrow=T);A
## 2.2 将1,2...,20构成两个4x5的矩阵，矩阵A按列输入，B按行输入
## (1) C = A+B
A<-matrix(c(1:20),ncol=5);A
B <- matrix(c(1:20),ncol=5,byrow = T)
B <- matrix(c(1:20),ncol=5,byrow = T);B
C <- A+B;C
## (2) D = AB
D <- A %*% B;D
## (2) D = AB
D <- t(A) %*% B;D
## (3)
E <- A * B;E
## (4) F是由A的前3行和前3列构成的矩阵
F <- A[1:3,1:3];F
## 2.2 将1,2...,20构成两个4x5的矩阵，矩阵A按列输入，B按行输入
## (1) C = A+B
A <- matrix(c(1:20),ncol=5);A
## (5) G是由矩阵B的各列构成的矩阵，但不含B的第三列
G <- B[,-3];G
B <- matrix(c(1:20),ncol=5,byrow = T);B
## 2.3 构造一个向量x，向量由5个1，3个2，4个3和2个4组成，用rep()函数
x <- rep(c(1,2,3,4),times=c(5,3,4,2));x
## 2.4 生成一个5阶的Hilbert矩阵
A1 <- matrix(rep(1:5),each=5,ncol = 5);A1
## 2.4 生成一个5阶的Hilbert矩阵
A1 <- matrix(rep(1:5,each=5),ncol = 5);A1
B1 <- matrix(rep(1:5,each=5),ncol = 5,byrow = T);B1
H <- 1/(A+B-1);H
H <- 1/(A1+B1-1);H
## 2.4(1)计算Hilbert矩阵的行列式
det(H)
## 2.4(2) 求H的逆矩阵
solve(H)
#(5)求矩阵的逆阵及解线性方程组
A<-matrix(c(1:8,10),ncol=3,byrow=T);A
# 求逆
solve(A)
#(6)求矩阵的特征值和特征向量
A<-matrix(c(1:8,10),ncol=3,byrow=T);A
eigen(A)
## 2.4(3) 求H的特征值和特征向量
eigen(H)
patientID <- c(1, 2, 3, 4)
age <- c(25, 34, 28, 52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
status <- c("Poor", "Improved", "Excellent", "Poor")
patientdata<-data.frame(patientID,age,diabetes,status)
patientdata
patientdata<-data.frame(
patientID=c(1, 2, 3, 4),age=c(25,34,28,52),
diabetes=c("Type1", "Type2", "Type1", "Type1"),
status=c("Poor", "Improved", "Excellent", "Poor")
)
patientdata
height <- c(156,165,157,162,159)
## 2.5 已知有5名学生的数据，用数据框的形式读入数据
studentName <- c('张三','李四','王五','赵六','丁一')
gender <- c('女','男','女','男','女')
age <- c(14, 15, 16, 14,15)
height <- c(156,165,157,162,159)
weight <- c(42.0,49.0,41.5,52.0,45.5)
studentdata<-data.frame(studentName,gender,age,height,weight)
studentdata
f <- function(n){
while(n != 1){
if(n <= 0){
print('要求输入一个整数')
break
}
if(n/2==0){
n <- n/2
}
else{
n <- 3*n+1
}
}
print('运算成功')
}
f(3)
f <- function(n){
while(n != 1){
if(n <= 0){
print('要求输入一个整数')
break
}
if(n/2==0){
n <- n/2
}
else{
n <- 3*n+1
}
}
print('运算成功')
}
f(2)
f <- function(n){
while(n != 1){
if(n <= 0){
print('要求输入一个整数')
break
}
if(n%%2==0){
n <- n/2
}
else{
n <- 3*n+1
}
}
print('运算成功')
}
f(3)
f(-3)
f <- function(n){
while(n != 1){
if(n <= 0){
print('要求输入一个整数')
break
}
if(n%%2==0){
n <- n/2
}
else{
n <- 3*n+1
}
}
if(n==1){
print('运算成功')
}
}
f(-3)
f <- function(n){
while(n != 1){
if(n <= 0){
print('要求输入一个正整数')
break
}
if(n%%2==0){
n <- n/2
}
else{
n <- 3*n+1
}
}
if(n==1){
print('运算成功')
}
}
f(-3)
## R作业
setwd('/Users/kokenhei/Desktop/study/ML/R')
## 2.6 将2.5数据写成一个纯文本文件，再用read.table()读取该文件
## 然后再用write.csv()写成一个能用excel表能打开的文件，并用excel打开
write.table(studentdata,'studentdata.txt')
read.table("studentdata.txt",head=T)
write.csv(studentdata,'studentdata.csv')
