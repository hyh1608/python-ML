d<-c(0,0,0,0)
x<-matrix(0,nrow=5,ncol=n)
x[,1]<-c(0,1,1,0,0)
y<-matrix(0,nrow=5,ncol=n)
y[,1]<-c(1,1,0,0,1)
d<-c(0,0,0,0)
for (j in 1:(n-1)){
for (i in 1:4){
d[i]<-sqrt((x[i+1,j]-x[i,j])^2+(y[i+1,j]-y[i,j])^2)
x[i,j+1]<-x[i,j]+delta_t*(x[i+1,j]-x[i,j])/d[i]
y[i,j+1]<-y[i,j]+delta_t*(y[i+1,j]-y[i,j])/d[i]
}
x[5,j+1]<-x[1,j+1]
y[5,j+1]<-y[1,j+1]
}
for (i in 1:4){
lines(x[i,],y[i,])
}
x
#---------------------------------------------------------------------------------#
#整合数据Aggregating data
#aggregate(x,by,FUN) x是待折叠的数据对象，
#by是一个变量名组成的列表（by中的变量必须在列表中，即使只有一个变量），
#这些变量将被去掉以形成新的观测，FUN则是用来计算描述性统计量的标量函数
#根据气缸数和档位数整合mtcars数据，并返回各个数值型变量的均值。
options(digits=3)
attach(mtcars)
mtcars
aggdata <-aggregate(mtcars, by=list(Group.cyl=cyl,Gruoup.gear=gear),
FUN=mean, na.rm=TRUE)
aggdata
#---------------------------------------------------------------------------------#
#reshape包
#首先将数据“融合”melt，以使每一行都是一个唯一的标识符-变量组合，然后将数据“重铸”cast为你想要的任何形状。
install.packages("reshape")
library(reshape)
mtcars[mtcars$cyl==8]
mtcars[mtcars$cyl==8,]
#测量是指最后两列中的值(5,6,3,5,6,1,2,4)，每个测量都能被标识符变量唯一确定，
#本例中的标识符是指ID,Time以及观测属于X1还是X2.
mydata<-data.frame(id=c(1,1,2,2),time=c(1,2,1,2),
X1=c(5,3,6,2),X2=c(6,5,1,4));mydata
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
#测量是指最后两列中的值(5,6,3,5,6,1,2,4)，每个测量都能被标识符变量唯一确定，
#本例中的标识符是指ID,Time以及观测属于X1还是X2.
mydata<-data.frame(id=c(1,1,2,2),time=c(1,2,1,2),
X1=c(5,3,6,2),X2=c(6,5,1,4));mydata
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
cast(md,time~variable,mean)#给出了X1和X2在时刻1和时刻2的均值
cast(md,id~time,mean)#每个观测在时刻1和时刻2的均值，对不同的的X1和X2进行了平均
cast(md,id+time~variable)
cast(md,id+variable~time)
cast(md,id~variable+time)
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
#测量是指最后两列中的值(5,6,3,5,6,1,2,4)，每个测量都能被标识符变量唯一确定，
#本例中的标识符是指ID,Time以及观测属于X1还是X2.
mydata<-data.frame(id=c(1,1,2,2),time=c(1,2,1,2),
X1=c(5,3,6,2),X2=c(6,5,1,4));mydata
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
library(reshape)
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
library(reshape)
#测量是指最后两列中的值(5,6,3,5,6,1,2,4)，每个测量都能被标识符变量唯一确定，
#本例中的标识符是指ID,Time以及观测属于X1还是X2.
mydata<-data.frame(id=c(1,1,2,2),time=c(1,2,1,2),
X1=c(5,3,6,2),X2=c(6,5,1,4));mydata
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
#---------------------------------------------------------------------------------#
#reshape包
#首先将数据“融合”melt，以使每一行都是一个唯一的标识符-变量组合，然后将数据“重铸”cast为你想要的任何形状。
install.packages("reshape2")
library(reshape2)
#测量是指最后两列中的值(5,6,3,5,6,1,2,4)，每个测量都能被标识符变量唯一确定，
#本例中的标识符是指ID,Time以及观测属于X1还是X2.
mydata<-data.frame(id=c(1,1,2,2),time=c(1,2,1,2),
X1=c(5,3,6,2),X2=c(6,5,1,4));mydata
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
cast(md,id+time~variable)
dcast(md,id+time~variable)
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
#---------------------------------------------------------------------------------#
#整合数据Aggregating data
#aggregate(x,by,FUN) x是待折叠的数据对象，
#by是一个变量名组成的列表（by中的变量必须在列表中，即使只有一个变量），
#这些变量将被去掉以形成新的观测，FUN则是用来计算描述性统计量的标量函数
#根据气缸数和档位数整合mtcars数据，并返回各个数值型变量的均值。
options(digits=3)
attach(mtcars)
aggdata <-aggregate(mtcars, by=list(Group.cyl=cyl,Gruoup.gear=gear),
FUN=mean, na.rm=TRUE)
aggdata
#---------------------------------------------------------------------------------#
#reshape包
#首先将数据“融合”melt，以使每一行都是一个唯一的标识符-变量组合，然后将数据“重铸”cast为你想要的任何形状。
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
#测量是指最后两列中的值(5,6,3,5,6,1,2,4)，每个测量都能被标识符变量唯一确定，
#本例中的标识符是指ID,Time以及观测属于X1还是X2.
mydata<-data.frame(id=c(1,1,2,2),time=c(1,2,1,2),
X1=c(5,3,6,2),X2=c(6,5,1,4));mydata
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
dcast(md,id~variable,FUN=mean)#给出了每个观测所有时刻在X1和X2上的均值
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
cast(md,id~time,mean)#每个观测在时刻1和时刻2的均值，对不同的的X1和X2进行了平均
#融合:将数据及重构为这样一种格式：每个测量变量独占一行，行中带有唯一确定这个测量所需的标识符变量。
md<-melt(mydata,id=c("id","time"));md
cast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
dcast(md,time~variable,mean)#给出了X1和X2在时刻1和时刻2的均值
dcast(md,id~variable,mean)#给出了每个观测所有时刻在X1和X2上的均值
dcast(md,time~variable,mean)#给出了X1和X2在时刻1和时刻2的均值
barplot(mtcars,main = '啥呀',xlab = 'hei',ylab = 'ha')
mtcars
aggdata <-aggregate(mtcars, by=list(Group.cyl=cyl,Gruoup.gear=gear),
FUN=mean, na.rm=TRUE)
aggdata
barplot(mtcars,main = '啥呀',xlab = 'hei',ylab = 'ha')
barplot(aggdata,main = '啥呀',xlab = 'hei',ylab = 'ha')
aggdata
barplot(aggdata$mpg,main = '啥呀',xlab = 'hei',ylab = 'ha')
barplot(aggdata$mpg,main = 'e~',xlab = 'hei',ylab = 'ha')
# pause after each graph
par(ask = TRUE)
# pause after each graph
par(ask = TRUE)
#保存当前的图形参数设置save original graphic settings
opar <- par(no.readonly = TRUE)
#Load vcd package
library(grid)
library(vcd)
install.packages('vcd')
library(vcd)
install.packages('lmtest')
library(vcd)
install.packages('lmtest')
library(vcd)
library(lmtest)
library(vcd)
install.packages('lmtest')
install.packages('vcd')
library(vcd)
install.packages('lmtest')
install.packages('lmtest')
install.packages('vcd')
install.packages('vcd')
par(mfrow = c(2, 2))
hist(mtcars$mpg)#简单直方图
hist(mtcars$mpg, breaks = 12, col = "red",
xlab = "Miles Per Gallon",
main = "Colored histogram with 12 bins")#指定组数和颜色
hist(mtcars$mpg, freq = FALSE, breaks = 12, col = "red",
xlab = "Miles Per Gallon",
main = "Histogram, rug plot, density curve")
rug(jitter(mtcars$mpg))
lines(density(mtcars$mpg), col = "blue", lwd = 2)#添加轴须图
install.packages('vcd')
install.packages('vcd')
library(vcd)
#Load vcd package
library(grid)
library(vcd)
par(mfrow = c(2, 2))
hist(mtcars$mpg)#简单直方图
hist(mtcars$mpg, breaks = 12, col = "red",
xlab = "Miles Per Gallon",
main = "Colored histogram with 12 bins")#指定组数和颜色
hist(mtcars$mpg, freq = FALSE, breaks = 12, col = "red",
xlab = "Miles Per Gallon",
main = "Histogram, rug plot, density curve")
rug(jitter(mtcars$mpg))
hist(mtcars$mpg, breaks = 12, col = "red",
xlab = "Miles Per Gallon",
main = "Colored histogram with 12 bins")#指定组数和颜色
hist(mtcars$mpg, freq = FALSE, breaks = 12, col = "red",
xlab = "Miles Per Gallon",
main = "Histogram, rug plot, density curve")
par(mfrow = c(2, 2))
hist(mtcars$mpg)#简单直方图
hist(mtcars$mpg, breaks = 12, col = "red",
xlab = "Miles Per Gallon",
main = "Colored histogram with 12 bins")#指定组数和颜色
hist(mtcars$mpg, freq = FALSE, breaks = 12, col = "red",
xlab = "Miles Per Gallon",
main = "Histogram, rug plot, density curve")
rug(jitter(mtcars$mpg))
lines(density(mtcars$mpg), col = "blue", lwd = 2)#添加轴须图
lines(density(mtcars$mpg), col = "blue", lwd = 2)#添加轴须图
# Histogram with Superimposed Normal Curve #添加正态密度曲线和外框
x<-mtcars$mpg
h <- hist(x, breaks = 12, col = "red",
xlab = "Miles Per Gallon",
main = "Histogram with normal curve and box")
xfit <- seq(min(x), max(x), length = 40)
yfit <- dnorm(xfit, mean = mean(x), sd = sd(x))
yfit <- yfit * diff(h$mids[1:2]) * length(x)
lines(xfit, yfit, col = "blue", lwd = 2)
box()
par(mfrow = c(2, 1))
d <- density(mtcars$mpg)
plot(d)
d <- density(mtcars$mpg)
plot(d, main = "Kernel Density of Miles Per Gallon")
polygon(d, col = "red", border = "blue")
rug(mtcars$mpg, col = "brown")
par(lwd = 2)#将线条设置为2倍宽度
install.packages("sm")
library(sm)
library(sm)
attach(mtcars)
cyl.f <- factor(cyl, levels = c(4, 6, 8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))#创建分组因子
sm.density.compare(mpg, cyl, xlab = "Miles Per Gallon")#绘制密度图
title(main = "MPG Distribution by Car Cylinders")
colfill <- c(2:(2 + length(levels(cyl.f))))#创建一个颜色向量
cat("Use mouse to place legend...", "\n\n")
#通过鼠标单击添加图例
legend(locator(1), levels(cyl.f), fill = colfill)
#----------------------------------------------------------------#
#两个交叉因子的箱线图Box plots for two crossed factors
#创建气缸数量的因子
mtcars$cyl.f <- factor(mtcars$cyl,
levels = c(4, 6, 8),
labels = c("4", "6", "8"))
#创建变速箱类型的因子
mtcars$am.f <- factor(mtcars$am,
levels = c(0, 1),
labels = c("auto", "standard"))
boxplot(mpg ~ am.f * cyl.f, data = mtcars,
varwidth = TRUE, col = c("gold", "darkgreen"),
main = "MPG Distribution by Auto Type",
xlab = "Auto Type")
#----------------------------------------------------------------#
#小提琴图Violin plots（核密度图以镜像方式在箱线图上的叠加，外部形状即为核密度估计）
install.packages("vioplot")
library(vioplot)
#vioplot函数要求将要绘制的不同组分离到不同的变量中
x1 <- mtcars$mpg[mtcars$cyl == 4]
x2 <- mtcars$mpg[mtcars$cyl == 6]
x3 <- mtcars$mpg[mtcars$cyl == 8]
vioplot(x1, x2, x3,
names = c("4 cyl", "6 cyl", "8 cyl"),
col = "gold")
title("Violin Plots of Miles Per Gallon")
#添加notch=T得到含凹槽的箱线图，varwidth=T使得箱线图的宽度与它们各自的样本大小成正比
boxplot(mpg ~ cyl, data = mtcars, notch = TRUE,
varwidth = TRUE, col = "red",
main = "Car Milage Data",
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon")
par(opar)
#----------------------------------------------------------------#
#两个交叉因子的箱线图Box plots for two crossed factors
#创建气缸数量的因子
mtcars$cyl.f <- factor(mtcars$cyl,
levels = c(4, 6, 8),
labels = c("4", "6", "8"))
#创建变速箱类型的因子
mtcars$am.f <- factor(mtcars$am,
levels = c(0, 1),
labels = c("auto", "standard"))
boxplot(mpg ~ am.f * cyl.f, data = mtcars,
varwidth = TRUE, col = c("gold", "darkgreen"),
main = "MPG Distribution by Auto Type",
xlab = "Auto Type")
boxplot(mpg ~ cyl.f * am.f , data = mtcars,
varwidth = TRUE, col = c("gold", "darkgreen"),
main = "MPG Distribution by Auto Type",
xlab = "Auto Type")
#----------------------------------------------------------------#
#6.5箱线图
par(mfrow = c(1, 2))
#----------------------------------------------------------------#
#两个交叉因子的箱线图Box plots for two crossed factors
#创建气缸数量的因子
mtcars$cyl.f <- factor(mtcars$cyl,
levels = c(4, 6, 8),
labels = c("4", "6", "8"))
#创建变速箱类型的因子
mtcars$am.f <- factor(mtcars$am,
levels = c(0, 1),
labels = c("auto", "standard"))
boxplot(mpg ~ cyl.f * am.f , data = mtcars,
varwidth = TRUE, col = c("gold", "darkgreen"),
main = "MPG Distribution by Auto Type",
xlab = "Auto Type")
boxplot(mpg ~ am.f * cyl.f , data = mtcars,
varwidth = TRUE, col = c("gold", "darkgreen"),
main = "MPG Distribution by Auto Type",
xlab = "Auto Type")
#vioplot函数要求将要绘制的不同组分离到不同的变量中
x1 <- mtcars$mpg[mtcars$cyl == 4]
x2 <- mtcars$mpg[mtcars$cyl == 6]
x3 <- mtcars$mpg[mtcars$cyl == 8]
vioplot(x1, x2, x3,
names = c("4 cyl", "6 cyl", "8 cyl"),
col = "gold")
#----------------------------------------------------------------#
#6.5箱线图
par(mfrow = c(1, 2))
boxplot(mpg ~ cyl, data = mtcars,
main = "Car Milage Data",
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon")
#----------------------------------------------------------------#
#6.6 点图
#在简单水平刻度上绘制大量标签值
dotchart(mtcars$mpg, labels = row.names(mtcars),
cex = 0.7,
main = "Gas Milage for Car Models",
xlab = "Miles Per Gallon")
x <- mtcars[order(mtcars$mpg), ]
x$cyl <- factor(x$cyl)
x$color[x$cyl == 4] <- "red"
x$color[x$cyl == 6] <- "blue"
x$color[x$cyl == 8] <- "darkgreen"
dotchart(x$mpg, labels = row.names(x), cex = 0.7,
pch = 19, groups = x$cyl,
gcolor = "black", color = x$color,
main = "Gas Milage for Car Models\ngrouped by cylinder",
xlab = "Miles Per Gallon")
#7.1 描述性统计分析
vars <- c("mpg", "hp", "wt")
head(mtcars[vars])
summary(mtcars[vars])
mystats <- function(x, na.omit = FALSE) {
if (na.omit)
x <- x[!is.na(x)]
m <- mean(x)
n <- length(x)
s <- sd(x)
skew <- sum((x - m)^3/s^3)/n
kurt <- sum((x - m)^4/s^4)/n - 3
return(c(n = n, mean = m, stdev = s, skew = skew, kurtosis = kurt))
}
sapply(mtcars[vars], mystats)
mystats(mtcars[vars])
mtcars[vars]
library(Hmisc)
install.packages(Hmisc)
install.packages('Hmisc')
library(Hmisc)
describe(mtcars[vars])
library(pastecs)
#----------------------------------------------------------------------#
# 7.2 频数表和列联表
#----------------------------------------------------------------------#
# get Arthritis data
library(vcd)
head(Arthritis)
#一维列联表one way table
mytable<-with(Arthritis,table(Improved))
mytable
prop.table(mytable)#将频数转化为比例值
prop.table(mytable)*100#转化为百分比
#----------------------------------------------------------------------#
#二维列联表two way table
#table:使用N个分类变量（因子）创建一个N维列联表
mytable<-with(Arthritis,table(Treatment,Improved))
mytable
mytable<-xtabs(~Treatment+Improved,data=Arthritis)
chisq.test(mytable)
mytable<-xtabs(~Improved+Sex,data=Arthritis)
chisq.test(mytable)
mytable1<-xtabs(Treatment~Improved,data=Arthritis)
fit <- lm(weight ~ height, data = women)
summary(fit)
women$weight
fitted(fit)
residuals(fit)
plot(fit)
fit2 <- lm(weight ~ height + I(height^2), data = women)
summary(fit2)
plot(women$height, women$weight, main = "Women Age 30-39",
xlab = "Height (in inches)", ylab = "Weight (in lbs)")
lines(women$height, fitted(fit2))
plot(fit2)
## 画出拟合曲线和散点图
xfit<-seq(8,44,len=200)
## 画出拟合曲线和散点图
xfit<-seq(8,44,len=200);xfit
data.frame(X=xfit)
yfit<-predict(nls.sol, data.frame(X=xfit))
## 作非线性拟合，并输出各参数的估计值
nls.sol<-nls(Y~a+(0.49-a)*exp(-b*(X-8)), data=cl,
start = list( a= 0.1, b = 0.01 ))
## 输入数据，构成数据框
cl<-data.frame(
X=c(rep(2*4:21, c(2, 4, 4, 3, 3, 2, 3, 3, 3, 3, 2,
3, 2, 1, 2, 2, 1, 1))),
Y=c(0.49, 0.49, 0.48, 0.47, 0.48, 0.47, 0.46, 0.46,
0.45, 0.43, 0.45, 0.43, 0.43, 0.44, 0.43, 0.43,
0.46, 0.45, 0.42, 0.42, 0.43, 0.41, 0.41, 0.40,
0.42, 0.40, 0.40, 0.41, 0.40, 0.41, 0.41, 0.40,
0.40, 0.40, 0.38, 0.41, 0.40, 0.40, 0.41, 0.38,
0.40, 0.40, 0.39, 0.39)
)
cl
## 作非线性拟合，并输出各参数的估计值
nls.sol<-nls(Y~a+(0.49-a)*exp(-b*(X-8)), data=cl,
start = list( a= 0.1, b = 0.01 ))
nls.sum<-summary(nls.sol); nls.sum
## 画出拟合曲线和散点图
xfit<-seq(8,44,len=200);xfit
yfit<-predict(nls.sol, data.frame(X=xfit))
plot(cl$X, cl$Y)
lines(xfit,yfit)
lamp<-data.frame(
X=c(1600, 1610, 1650, 1680, 1700, 1700, 1780, 1500, 1640,
1400, 1700, 1750, 1640, 1550, 1600, 1620, 1640, 1600,
1740, 1800, 1510, 1520, 1530, 1570, 1640, 1600),
A=factor(c(rep(1,7),rep(2,5), rep(3,8), rep(4,6)))
)
# factor(rep(1:4),c(7,5,8,6))
lamp.aov1<-aov(X,A,data=lamp)
# factor(rep(1:4),c(7,5,8,6))
lamp.aov<-aov(X ~ A, data=lamp)
summary(lamp.aov)
source("anova.tab.R"); anova.tab(lamp.aov)
source("anova.tab.R"); anova.tab(lamp.aov)
source("anova.tab.R"); anova.tab(lamp.aov)
getwd()
setwd('/Users/kokenhei/Desktop/study/ML/机器学习实战/R/code')
setwd('/Users/kokenhei/Desktop/study/ML/机器学习实战/R/code')
source("anova.tab.R"); anova.tab(lamp.aov)
plot(lamp$X~lamp$A)
mouse<-data.frame(
X=c( 2, 4, 3, 2, 4,  7, 7, 2, 2, 5, 4, 5,  6, 8, 5, 10, 7,
12, 12, 6, 6, 7, 11, 6, 6, 7, 9, 5, 5, 10, 6, 3, 10),
A=factor(c(rep(1,11),rep(2,10), rep(3,12)))
)
mouse.aov<-aov(X ~ A, data=mouse)
source("anova.tab.R"); anova.tab(mouse.aov)
A<-gl(4,3);A
B<-gl(3,1,12);B
setwd('/Users/kokenhei/Desktop/study/ML/机器学习实战/R/code')
toothpaste<-data.frame(
X1=c(-0.05, 0.25,0.60,0,   0.25,0.20, 0.15,0.05,-0.15, 0.15,
0.20, 0.10,0.40,0.45,0.35,0.30, 0.50,0.50, 0.40,-0.05,
-0.05,-0.10,0.20,0.10,0.50,0.60,-0.05,0,    0.05, 0.55),
X2=c( 5.50,6.75,7.25,5.50,7.00,6.50,6.75,5.25,5.25,6.00,
6.50,6.25,7.00,6.90,6.80,6.80,7.10,7.00,6.80,6.50,
6.25,6.00,6.50,7.00,6.80,6.80,6.50,5.75,5.80,6.80),
Y =c( 7.38,8.51,9.52,7.50,9.33,8.28,8.75,7.87,7.10,8.00,
7.89,8.15,9.10,8.86,8.90,8.87,9.26,9.00,8.75,7.95,
7.65,7.27,8.00,8.50,8.75,9.21,8.27,7.67,7.93,9.26)
)
toothpaste
lm.sol<-lm(Y~1+X1+X2,data=toothpaste)
summary(lm.sol)
influence.measures(lm.sol)
plot(lm.sol,3)
lm.new<-lm(Y~1+X1+X2,data=toothpaste,subset = (-5,-8,-11,-24))
lm.new<-lm(Y~1+X1+X2,data=toothpaste,subset = c(-5,-8,-11,-24))
window()
windows()
windows()
window()
plot(lm.new,3)
# 3表示标准化残差开方的散点图，检查拟合度问题
plot(lm.sol,3)
summary(lm.new)
# 3表示标准化残差开方的散点图，检查拟合度问题
plot(lm.sol,3)
lm.new<-lm(Y~1+X1+X2,data=toothpaste,subset = c(-5,-8,-11))
plot(lm.new,3)
lm.new<-lm(Y~1+X1+X2,data=toothpaste,subset = c(-5,-8,-11,-24))
plot(lm.new,3)
summary(lm.new)
par(mfrow = c(2, 1))
toothpaste<-data.frame(
X1=c(-0.05, 0.25,0.60,0,   0.25,0.20, 0.15,0.05,-0.15, 0.15,
0.20, 0.10,0.40,0.45,0.35,0.30, 0.50,0.50, 0.40,-0.05,
-0.05,-0.10,0.20,0.10,0.50,0.60,-0.05,0,    0.05, 0.55),
X2=c( 5.50,6.75,7.25,5.50,7.00,6.50,6.75,5.25,5.25,6.00,
6.50,6.25,7.00,6.90,6.80,6.80,7.10,7.00,6.80,6.50,
6.25,6.00,6.50,7.00,6.80,6.80,6.50,5.75,5.80,6.80),
Y =c( 7.38,8.51,9.52,7.50,9.33,8.28,8.75,7.87,7.10,8.00,
7.89,8.15,9.10,8.86,8.90,8.87,9.26,9.00,8.75,7.95,
7.65,7.27,8.00,8.50,8.75,9.21,8.27,7.67,7.93,9.26)
)
toothpaste
lm.sol<-lm(Y~1+X1+X2,data=toothpaste)
summary(lm.sol)
# 3表示标准化残差开方的散点图，检查拟合度问题
plot(lm.sol,3)
lm.new<-lm(Y~1+X1+X2,data=toothpaste,subset = c(-5,-8,-11,-24))
plot(lm.new,3)
summary(lm.sol)
rm(list=ls())
